package me.primooctopus33.octohack.client.modules.exploit;

import java.lang.reflect.Field;
import me.primooctopus33.octohack.client.modules.Module;
import me.primooctopus33.octohack.client.setting.Setting;
import me.primooctopus33.octohack.event.events.PacketEvent;
import net.minecraft.network.Packet;
import net.minecraft.util.StringUtils;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PacketsLogger
extends Module {
    public Setting<Packets> packets = this.register(new Setting<Packets>("Packets", Packets.OUTGOING));
    public Setting<Boolean> fullInfo = this.register(new Setting<Boolean>("Log All Info", false));

    public PacketsLogger() {
        super("PacketsLogger", "Logs incoming and outgoing packets", Module.Category.EXPLOIT, true, false, false);
    }

    @SubscribeEvent(receiveCanceled=true)
    public void onPacketSend(PacketEvent.Send event) {
        if (this.packets.getValue() == Packets.OUTGOING || this.packets.getValue() == Packets.ALL) {
            this.writePacketOnConsole((Packet<?>)event.getPacket(), false);
        }
    }

    @SubscribeEvent(receiveCanceled=true)
    public void onPacketReceive(PacketEvent.Receive event) {
        if (this.packets.getValue() == Packets.INCOMING || this.packets.getValue() == Packets.ALL) {
            this.writePacketOnConsole((Packet<?>)event.getPacket(), true);
        }
    }

    private void writePacketOnConsole(Packet<?> packet, boolean in) {
        if (this.fullInfo.getValue().booleanValue()) {
            System.out.println((in ? "In: " : "Send: ") + packet.getClass().getSimpleName() + " {");
            try {
                for (Class<?> clazz = packet.getClass(); clazz != Object.class; clazz = clazz.getSuperclass()) {
                    for (Field field : clazz.getDeclaredFields()) {
                        if (field == null) continue;
                        if (!field.isAccessible()) {
                            field.setAccessible(true);
                        }
                        System.out.println(StringUtils.stripControlCodes((String)("      " + field.getType().getSimpleName() + " " + field.getName() + " : " + field.get(packet))));
                    }
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("}");
        } else {
            System.out.println(packet.toString());
        }
    }

    public static enum Packets {
        NONE,
        INCOMING,
        OUTGOING,
        ALL;

    }
}
